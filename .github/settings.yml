# These settings are synced to GitHub by the Probot Settings App:
# https://probot.github.io/apps/settings/
# https://github.com/repository-settings/app

repository:
  # See https://docs.github.com/en/rest/repos/repos#update-a-repository for all available settings.

  # The name of the repository.
  # name: repo-name

  # A short description of the repository.
  # description: description of repo

  # A URL with more information about the repository.
  # homepage: https://example.github.io/

  # A comma-separated list of topics to set on the repository.
  # topics: github, probot

  # Either true to make the repository private or false to make it public. Default: false.
  # private: false

  # Can be public, private, or internal (if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+).
  # visibility: public

  # Specify which security and analysis features to enable or disable for the repository.
  # security_and_analysis:
  #   # Use the status property to enable or disable GitHub Advanced Security for this repository.
  #   # For more information, see https://docs.github.com/github/getting-started-with-github/learning-about-github/about-github-advanced-security.
  #   advanced_security:
  #     # Can be enabled or disabled.
  #     status: enabled

  #   # Use the status property to enable or disable secret scanning for this repository.
  #   # For more information, see https://docs.github.com/code-security/secret-security/about-secret-scanning.
  #   secret_scanning:
  #     # Can be enabled or disabled.
  #     status: enabled

  #   # Use the status property to enable or disable secret scanning push protection for this repository.
  #   # For more information, see https://docs.github.com/code-security/secret-scanning/protecting-pushes-with-secret-scanning.
  #   secret_scanning_push_protection:
  #     # Can be enabled or disabled.
  #     status: enabled

  # Either true to enable issues for this repository or false to disable them.
  # Default: true
  # has_issues: true

  # Either true to enable projects for this repository or false to disable them. Note: If you're creating a repository in an organization that has disabled repository projects, the default is false, and if you pass true, the API returns an error.
  # Default: true
  has_projects: false

  # Either true to enable the wiki for this repository or false to disable it.
  # Default: true
  has_wiki: false

  # Either true to make this repo available as a template repository or false to prevent it.
  # Default: false
  # is_template: false

  # Updates the default branch for this repository.
  default_branch: main

  # Either true to allow squash-merging pull requests, or false to prevent squash-merging.
  # Default: true
  # allow_squash_merge: true

  # Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits.
  # Default: true
  allow_merge_commit: false

  # Either true to allow rebase-merging pull requests, or false to prevent rebase-merging.
  # Default: true
  allow_rebase_merge: false

  # Either true to allow auto-merge on pull requests, or false to disallow auto-merge.
  # Default: false
  allow_auto_merge: true

  # Either true to allow automatically deleting head branches when pull requests are merged, or false to prevent automatic deletion.
  # Default: false
  delete_branch_on_merge: true

  # Either true to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
  # Default: false
  # allow_update_branch: false

  # The default value for a squash merge commit title:
  #  - PR_TITLE - default to the pull request's title.
  #  - COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
  # Can be one of: PR_TITLE, COMMIT_OR_PR_TITLE
  squash_merge_commit_title: PR_TITLE

  # The default value for a squash merge commit message:
  #  - PR_BODY - default to the pull request's body.
  #  - COMMIT_MESSAGES - default to the branch's commit messages.
  #  - BLANK - default to a blank commit message.
  # Can be one of: PR_BODY, COMMIT_MESSAGES, BLANK
  squash_merge_commit_message: BLANK

  # The default value for a merge commit title.
  #  - PR_TITLE - default to the pull request's title.
  #  - MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
  # Can be one of: PR_TITLE, MERGE_MESSAGE
  # merge_commit_title: PR_TITLE

  # The default value for a merge commit message.
  #  - PR_TITLE - default to the pull request's title.
  #  - PR_BODY - default to the pull request's body.
  #  - BLANK - default to a blank commit message.
  # Can be one of: PR_BODY, PR_TITLE, BLANK
  # merge_commit_message: BLANK

  # true to archive this repository. Note: You cannot unarchive repositories through the API.
  # Default: false
  # archived: false

  # Either true to allow private forks, or false to prevent private forks.
  # Default: false
  # allow_forking: false

  # Either true to require contributors to sign off on web-based commits, or false to not require contributors to sign off on web-based commits.
  # Default: false
  # web_commit_signoff_required: false

  # Either `true` to enable automated security fixes, or `false` to disable
  # automated security fixes.
  enable_automated_security_fixes: false

  # Either `true` to enable vulnerability alerts, or `false` to disable
  # vulnerability alerts.
  enable_vulnerability_alerts: true

# Labels: define labels for Issues and Pull Requests
labels:
  - name: bug
    color: '#d73a4a'
    description: Something isn't working

  - name: dependencies
    color: '#A0BB41'
    description: Dependency updates or security alerts

  - name: documentation
    color: '#0075ca'
    description: Improvements or additions to documentation

  - name: duplicate
    color: '#cfd3d7'
    description: This issue or pull request already exists

  - name: enhancement
    color: '#a2eeef'
    description: New feature or request

  - name: good first issue
    color: '#7057ff'
    description: Good for newcomers

  - name: help wanted
    color: '#008672'
    description: Extra attention is needed

  - name: invalid
    color: '#e4e669'
    description: This doesn't seem right

  - name: question
    color: '#d876e3'
    description: Further information is requested

  - name: security
    color: '#ff0000'
    description: Security vulnerability

  - name: wontfix
    color: '#ffffff'
    description: This will not be worked on

# Milestones: define milestones for Issues and Pull Requests
# milestones:
#   - title: milestone-title
#     description: milestone-description
#     # The state of the milestone. Either `open` or `closed`
#     state: open

# Collaborators: give specific users access to this repository.
# See https://docs.github.com/en/rest/collaborators/collaborators#add-a-repository-collaborator for available options
collaborators:
  - username: marcusrbrown
    permission: admin
  - username: fro-bot
    permission: push

  # Note: `permission` is only valid on organization-owned repositories.
  # The permission to grant the collaborator. Can be one of:
  # * `pull` - can pull, but not push to or administer this repository.
  # * `push` - can pull and push, but not administer this repository.
  # * `admin` - can pull, push and administer this repository.
  # * `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
  # * `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.

# See https://docs.github.com/en/rest/teams/teams#add-or-update-team-repository-permissions for available options
# teams:
#   - name: owners
# The permission to grant the team. Can be one of:
# * `pull` - can pull, but not push to or administer this repository.
# * `push` - can pull and push, but not administer this repository.
# * `admin` - can pull, push and administer this repository.
# * `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
# * `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
# permission: admin

# - name: services
#   permission: maintain

branches:
  - name: main
    # https://docs.github.com/en/rest/branches/branch-protection#update-branch-protection
    # Branch Protection settings. Set to null to disable
    protection:
      # Required. Require status checks to pass before merging. Set to null to disable
      required_status_checks:
        # Required. Require branches to be up to date before merging.
        strict: true
        # Deprecated: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use checks instead of contexts for more fine-grained control.
        contexts: ['Lint']
        # The list of status checks to require in order to merge into this branch.
        checks:
          # The name of the required check.
          - context: 'Lint'
            # The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
            app_id: 15368 # GitHub Actions

      # Required. Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable.
      enforce_admins: true

      # Required. Require at least one approving review on a pull request, before merging. Set to null to disable.
      required_pull_request_reviews:
        null
        # Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only available for organization-owned repositories. Omit this parameter for personal repositories.
        # dismissal_restrictions:
        #   # The list of user logins with dismissal access.
        #   users: []
        #   # The list of team slugs with dismissal access.
        #   teams: []
        #   # The list of app slugs with dismissal access.
        #   apps: []

        # Set to true if you want to automatically dismiss approving reviews when someone pushes a new commit.
        # dismiss_stale_reviews: true

        # Blocks merging pull requests until code owners review them.
        # https://docs.github.com/articles/about-code-owners/
        # require_code_owner_reviews: true

        # Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
        # required_approving_review_count: 1

        # Whether someone other than the person who last pushed to the branch must approve this pull request. Default: false.
        # Default: false
        # require_last_push_approval: false

        # Allow specific users, teams, or apps to bypass pull request requirements.
        # bypass_pull_request_allowances:
        #   # The list of user logins allowed to bypass pull request requirements.
        #   users: []
        #   # The list of team slugs allowed to bypass pull request requirements.
        #   teams: []
        #   # The list of app slugs allowed to bypass pull request requirements.
        #   apps: []

      # Required. Restrict who can push to this branch. Team and user restrictions are only available for organization-owned repositories. Set to null to disable.
      restrictions:
        null
        # Required. The list of user logins with push access.
        # users: []
        # Required. The list of team slugs with push access.
        # teams: []
        # The list of app slugs with push access.
        # apps: []

      # Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to true to enforce a linear commit history. Set to false to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: false. For more information, see "Require linear history" in the GitHub Help documentation:
      # https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#require-linear-history
      required_linear_history: true

      # Permits force pushes to the protected branch by anyone with write access to the repository. Set to true to allow force pushes. Set to false or null to block force pushes. Default: false.
      # For more information, see "Allow force pushes" in the GitHub Help documentation.
      # https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#allow-force-pushes
      # allow_force_pushes: false

      # Allows deletion of the protected branch by anyone with write access to the repository. Set to false to prevent deletion of the protected branch. Default: false.
      # For more information, see "Allow deletions" in the GitHub Help documentation:
      # https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#allow-deletions
      # allow_deletions: false

      # If set to true, the restrictions branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to true to restrict new branch creation. Default: false.
      # block_creations: false

      # Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to false to disable. Default: false.
      # required_conversation_resolution: true

      # Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: false.
      # Default: false
      # lock_branch: false

      # Whether users can pull changes from upstream when the branch is locked. Set to true to allow fork syncing. Set to false to prevent fork syncing. Default: false.
      # Default: false
      # allow_fork_syncing: false

  - name: master
    protection:
      required_pull_request_reviews: null
      required_status_checks:
        strict: true
        contexts: []
      enforce_admins: true
      required_linear_history: true
      restrictions: null
